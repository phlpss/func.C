#include "func.h"
#include "stdlib.h"
#include <stdio.h>
#include <stdbool.h>
#include <string.h>


/*
void delete_by_price(elem **head,size_t pos){
    elem *previous=NULL;
    elem *current=*head;
    while(1){
        previous=current;
        current=current->next;
        if(!current)
            break;
        if(current->book.price<5){
            if(!current->next) {
                previous->next = NULL;
                break;
            }
            previous->next=current->next;
            free(current);
            current=previous;
        }

        current = *head;
        if(current->book.price<5){
            if(current->next){
                current->next=*head;
            }else
                *head=NULL;
        }
    }
}


bool search(elem *head,int key){
    elem *current=head;
    while(current){
        if(current->book.price==key)
            return true;
        current=current->next;
    }
    return false;
}

void insert_head(elem **head,elem *new_book){
    new_book->next=*head;
    *head=new_book;
    }

void insert_end(elem **head,elem *new_book){
    elem* current=*head;
    if(*head==NULL)
        *head=new_book;
    while(current->next){
        current=current->next;
    }
    current->next=new_book;
}

void insert(elem **head,elem* new_book){
    if(!*head){
        *head=new_book;
        new_book->next=NULL;
    }else{
        if(strcmp ((*head)->book.surnameOfAuthor, new_book ->book.surnameOfAuthor) > 0){
            new_book->next=*head;
            *head=new_book;
            return;
        }

        elem *curr=*head;
        while(curr->next){
            if((strcmp (curr -> book.surnameOfAuthor, new_book -> book.surnameOfAuthor) < 0) && (strcmp(new_book -> book.surnameOfAuthor, curr -> next -> book.surnameOfAuthor) < 0)){
                new_book->next=curr->next;
                curr->next=new_book;
                return;
            }else
                curr=curr->next;
        }
        curr->next=new_book;
        new_book->next=NULL;
    }
}

Node* mergeSort(Node* headref) {
    Node* head=headref;
    Node* a,*b;

    if(head==NULL||head->next==NULL)
        return head;

    splitter(head,&a,&b);

    a=mergeSort(a);
    b=mergeSort(b);

    return sortedMerge(a,b);

}
void splitter(Node* head,Node **rHead,Node** lHead){
    Node* fast;
    Node* slow;
    if (head == NULL || head->next == NULL) {
        *rHead = head;
        *lHead = NULL;
    } else {
        slow= head;
        fast=head->next;
        while(fast!=NULL){
            fast=fast->next;
            if(fast!=NULL){
                fast=fast->next;
                slow=slow->next;
            }
        }
        *rHead=head;
        *lHead=slow->next;
        slow->next=NULL;
    }
}

Node* sortedMerge(Node *a,Node* b){
    Node* result=NULL;

    //base cases
    if(a==NULL){
        return (b);
    }else if(b==NULL)
        return (a);

    if(a->data<=b->data){
        result=a;
        result->next=sortedMerge(a->next,b);
    }else{
        result=b;
        result->next=sortedMerge(a,b->next);
    }
    return (result);
}*/

elem* scan(){
    elem* stud=(elem*)malloc(sizeof(elem));
    scanf("%s %s",stud->student.name,stud->student.surname);
    scanf("%d %d",&stud->student.year,&stud->student.avg);
    stud->next=NULL;
    return stud;
}
node* scan_double(){
    node* stud=(node*)malloc(sizeof(node));
    scanf("%s %s",stud->student.name,stud->student.surname);
    scanf("%d %d",&stud->student.year,&stud->student.avg);
    stud->next=NULL;
    stud->prev=NULL;
    return stud;
}

void insert_in_end(elem **head,elem* student_to_insert){
    elem* curr=*head;
    if(*head==NULL){
        (*head)=student_to_insert;
    }else{
        while(curr->next!=NULL){
            curr=curr->next;
        }
        curr->next=student_to_insert;
    }
}//1
void insert_in_end_double(node **head,node* student_to_insert){
    if(*head==NULL){
        *head=student_to_insert;
        student_to_insert->prev=NULL;
        student_to_insert->next=NULL;
    }else{
        node *curr=*head;
        node *prev=NULL;
        while(curr->next!=NULL){
            prev=curr;
            curr=curr->next;
        }
        curr->next=student_to_insert;
        (*curr).next->prev=prev;
    }
}

void delete_last(elem *head){
    if(head==NULL)
        return;
    else if(head->next==NULL){
        free(head);
        head=NULL;
    }
    else{
        elem *current=head;
        elem* prev=head;
        while(current->next!=NULL){
            prev=current;
            current=current->next;
        }
        prev->next=NULL;
        free(current);

    }
}//1
void delete_last_double(node *head){
    if(!head){
        return;
    }else if(head->next==NULL){
        head=NULL;
        free(head);
    }else{
        node* prev=NULL;
        node* curr=head;
        while(curr->next!=NULL){
            prev=curr;
            curr=curr->next;
        }
        prev->next=NULL;
        free(curr);
    }
}

void deleteNode(elem **head, int pos){
    elem* previous;
    elem* current=*head;
    if(*head==NULL)
        return;
    else if(pos==1){
        *head=current->next;
        return;
    }else{
            for(int i=1;i<pos;i++){
                if(current){
                    previous=current;
                    current=current->next;
                }else{
                    printf("You entered wrong number.\n");
                    return;
                }
            }
            if(current->next==NULL){
                previous->next=NULL;
                free(current);
                return;
            }
            previous->next=current->next;
        }
}//1
void deleteNode_double(node **head,int pos){
    if(*head==NULL)
        return;
    else if(pos==1){
        node *temp=*head;
        temp->next->prev=NULL;
        *head=temp->next;
        free(temp);
    }else{
        node* current=*head;
        node* previous=NULL;
        for(int i = 1;i<pos;i++){
            if(current){
                previous=current;
                current=current->next;
            }else{
                return;
            }
        }
        if(current->next==NULL){
            previous->next=NULL;
            free(current);
            return;
        }
        previous->next=current->next;
        current->next->prev=previous;
    }
}

void deletehead(elem **head){
    if(*head==NULL){
        return;
    }else{
        elem* temp=*head;
        *head=(*head)->next;
        free(temp);
    }
}//1

void print(elem *head){
    elem* curr=head;
    while(curr!=NULL){
        printf("%s %s ",curr->student.name,curr->student.surname);
        printf("%d %d\n",curr->student.year,curr->student.avg);
        curr=curr->next;
    }
    printf("$$$$$$$$$$$$$$$$$\n");
}//
void printDouble(node *head){
    node* curr=head;
    node* temp=NULL;
    while(curr!=NULL){
        printf("%s %s ",curr->student.name,curr->student.surname);
        printf("%d %d\n",curr->student.year,curr->student.avg);
        curr=curr->next;
    }
    printf("$$$$$$$$$$$$$$$$$\n");
}//

int count(elem *head){
    int count =0;
    elem* current=head;

    while(current) {
        count++;
        current = current->next;
    }
    return count;
}//

void reverse(elem **head){
    if(!*head)
        return;
    elem *curr=*head,*next=NULL,*prev=NULL;
    while(curr){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    *head=prev;
}
void reverse_double(node** head){
    node* curr=*head;
    node* nextEl=curr->next;

    curr->next=NULL;
    curr->prev=nextEl;
    while(nextEl!=NULL){
        nextEl->prev=nextEl->next;
        nextEl->next=curr;
        curr=nextEl;
        nextEl=nextEl->prev;
    }
    *head=curr;
}

void insert_in_pos(elem **head,elem *new_book,size_t pos){
    elem* current=*head;
    if(!*head||pos==1){
        *head=new_book;
        new_book->next=NULL;
    }else{
        for(size_t i = 1;i<pos;i++){
            if(current){
                current = current->next;
            }else{
                printf("You entered wrong number for insert_in_pos\n");
                return;
            }
        }
        if(!(current->next)){
            current->next=new_book;
            new_book->next=NULL;
        }
        new_book->next=current->next;
        current->next=new_book;
    }
}
void insert_in_pos_double(node** head,node* new_stud,int pos){
    if(*head==NULL){
        *head=new_stud;
    }else if(pos==1){
        new_stud->next=*head;
        *head=new_stud;
    }else{
        node* current=*head;
        for(int i = 1;i<pos-1;i++){
            current=current->next;
        }
        if(current->next==NULL){
            current->next=new_stud;
            new_stud->prev=current;
            return;
        }
        node* next=current->next;
        current->next=new_stud;
        new_stud->prev=current;
        new_stud->next=next;

    }
}
void freeList(list **head){
    list *current = *head;
    list *next;
    while (current != NULL)
    {
        next=current->next;
        free(current);
        current=next;
    }
    *head=NULL;
}
